table(gender)
table(gender2)
able(gender2)
table(gender2)
prop.table(table(gender2))
source('~/rWork/rProjects/Analytics/Vector.R', echo=TRUE)
able(gender2)
table(gender2)
git config --global user.email "shreyas.benigeri@yahoo.com"
git config --global user.email "shreyas.benigeri@yahoo.com"
git config --global user.email "shreyas.benigeri@yahoo.com"
git config --global user.name "ShreyasRB"
git config --global user.email "shreyas.benigeri@yahoo.com"
?sample
?factor
source('~/rWork/rProjects/Analytics/Matrices.R', echo=TRUE)
x=c(1:12)
x=c(1:12)
?matrix
matrix(c(1:12),nrow=3,ncol=4)
m1=matrix(c(1:12),nrow=3,ncol=4)
m1=matrix(c(1:12),nrow=3)
m1=matrix(c(1:12),nrow=3)
mi
m1
?runif
marks3=runif(30,50,100)
marks3
m2=matrix(marks3,nrow=6)
m2
?matrix
m3=matrix(marks,nrow=6,byrow=T)
m3=matrix(marks3,nrow=6,byrow=T)
m3
#summary
colsums(m3)
#summary
colSums(m3)
rowSums(m3)
colMeans(m3)
rowMeans(m3)
sum(m3)
m3[m3>70]
m3[1,]
m3[,3]
m3
m3[3,1]
m3[1:2,3:5]
rollno=1:30
name=paste('student',1:30,sep='-')
?paste
name
batch=sample(c(2016,2017,2018),size=30,replace=T)
batch
table(batch)
?sample
marks1=rnorm(30,mean=65,sd=7)
marks2=rnorm(30,mean=60,sd=10)
marks1
marks2
?data.
?data.frame
df=data.frame(rollno,name,batch,gender,marks1,marks2,stringasfacotrs=F)
gender=(c('M','F'))
df=data.frame(rollno,name,batch,gender,marks1,marks2,stringasfacotrs=F)
df
df$name
df$gender
df$gender=factor(df$gender)
str(df)
df$batch=factor(df$batch,ordered=T,levels=c('2016','2017','2018'))
str(df)
summary(df)
df$roll=as.character(df$rollno)
summary(df)
head(df)
tail(df)
dim(df)
nrow(df)
ncol(df)
names(df)
head(df,n=2)
df[1,1:4]
df[1:2,1:4]
df[c(1,3),c(1,4,5,6)]
df[df$gender=='M']
df[df$gender=='M',3:5]
df[df$gender=='M',3:5 & df$marks>70,3:5]
df[df$gender=='M' & df$marks>70,3:5]
df[df$gender=='M' & df$marks>50,3:5]
df[df$gender=='M' & df$marks>30,3:5]
df[df$gender=='M' & df$marks1>30,3:5]
lenght(df)
length(df)
nrow(fd[df$gender=='M'])
nrow(df[df$gender=='M'])
nrow(df[df$gender=='M',])
#sort
sort(df$marks1)
marks1
order(df$marks1)
df[order(df$marks1),]
sort(df$marks1)
rev(sort(df$marks1))
df[order(df$gender,df$batch),]
?factor
aggerate(df$marks,by=list(df$batch),FUN=mean)
aggregate(df$marks,by=list(df$batch),FUN=mean)
aggregate(df$marks1,by=list(df$batch),FUN=mean)
aggregate(marks1~batch,data=df,FUN=MEAN)
aggregate(marks1~batch,data=df,FUN=mean)
aggregate(cbind(marks1,marks2)~batch,data=df,FUN=mean)
aggregate(cbind(marks1,marks2)~batch+gender,data=df,FUN-mean)
aggregate(cbind(marks1,marks2)~batch+gender,data=df,FUN=mean)
aggregate(cbind(marks1,marks2)~gender+batch,data=df,FUN=mean)
df[order(df$marks1),]
sort(df$marks1)
rev(sort(df$marks1))
df[order(df$gender,df$batch),]
#sort
sort(df$marks1)
marks1
order(df$marks1) #shows loc of elements
df$roll=as.character(df$rollno)
summary(df)
head(df,n=2)
tail(df)
df[1,1:4]
df[1:2,1:4]
df[df$gender=='M',3:5]   #males:display 3 to 5 column
write.csv(df)
write.csv(df,"C:\Users\YEAP\Documents\rWork\rProjects\Analytics")
write.csv(df,"\Users\YEAP\Documents\rWork\rProjects\Analytics")
write.csv(df,"./C:\Users\YEAP\Documents\rWork\rProjects\Analytics")
df
write.csv(df,"./data/bitsgoa.csv")
d3=read.csv(df,"./data/bitsgoa.csv")
d3=read.csv(df,"./data/bitsgoa.csv")
install.packages('amap')
install.packages('amap')
library(amap)
library(amap)
install.packages("dplyr")
library(dplyr)
library(amap)
library("amap", lib.loc="~/R/win-library/3.5")
d3-read.csv("./data/bitsgoa.csv")
d3=read.csv("./data/bitsgoa.csv")
d3
#read file : Method1
sales1 = read.csv("./data/denco.csv")
head(sales1)
#read file : Method2
sales2 = read.csv(file.choose())
str(sales2)
#read file: Method3
install.packages('gsheet')
library(gsheet)
sales3 = as.data.frame(gsheet2tbl(https://docs.google.com/spreadsheets/d/1h7HU0X_Q4T5h5D1Q36qoK40Tplz94x_HZYHOJJC_edU/edit#gid=216113907))
sales3 = as.data.frame(gsheet2tbl(https://docs.google.com/spreadsheets/d/1h7HU0X_Q4T5h5D1Q36qoK40Tplz94x_HZYHOJJC_edU/edit#gid=216113907))
str(sales3)
# whichever you read the data, store it in sales object
sales = sales1  # keeping a backup
class(sales)
str(sales)
summary(sales)
dim(sales) #dimensios of DF rows & colnum
unique(sales$custname)
length(unique(sales$custname))
length(unique(sales$region ))
#Rqmt-1 : Loyal Customers -----
#method-1a
#using table for counting custname occurance
(t1=table(sales$custname))
head(t1)  #unsorted
t2= sort(t1,decreasing=T )
head(t2)
?head
?table
#Method-1b - using dplyr
library(dplyr)
sales %>% dplyr::count(custname, sort=TRUE)
?sort
sales %>% dplyr::group_by(custname) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(desc(n))
sales %>% dplyr::group_by(custname) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(desc(n))
library(dplyr)  #For loading package for using
mtcars
mtcars %>% group_by(gear)
mtcars %>% group_by(gear) %>% summarise(mean(mpg))
mtcars %>% group_by(gear) %>% summarise(mean(mpg),max(mpg))
mtcars %>% group_by(gear) %>% summarise_all(mean)
mtcars %>% group_by(gear) %>% summarise_all(max)
mtcars %>% group_by(gear) %>% summarise(mpg>25)
mtcars %>% group_by(gear) %>% summarise(max(mpg)>25)
mtcars %>% summarise(max(mpg)>25)
mtcars %>% group_by(mpg,gear) %>% summarise(max(mpg)>25)
?summarise
mtcars %>% group_by(mpg,gear) %>% filter(mpg>25)
mtcars %>% select(mpg,gear) %>% filter(mpg>25)
mtcars %>% group_by(gear) %>% summarise_if(is.numeric,mean)
?is.numeric
mtcars %>% group_by(gear) %>% summarise_all(mean)
sales %>% group_by(region) %>% summarise_if(is.numeric,mean)
sales %>% group_by(region) %>% summarise_all(mean)
mtcars %>% group_by(gear) %>% summarise_all(mean)
mtcars %>% group_by(gear) %>% summarise_if(is.numeric,mean)
sales
sales %>% group_by(region) %>% summarise_if(is.numeric,mean)
sales %>% group_by(region)
mtcars %>% group_by(mpg,gear) %>% summarise(max(mpg)>25)
mtcars %>% group_by(gear) %>% summarise_all(max)
mtcars %>% group_by(gear) %>% summarise_all(mean)
mtcars %>% group_by(gear) %>% summarise(mean(mpg),max(mpg))
#Method-1b - using dplyr
library(dplyr)
#read file : Method1
sales1 = read.csv("./data/denco.csv")
head(sales1)
# whichever you read the data, store it in sales object
sales = sales1  # keeping a backup
class(sales)
str(sales)
#Rqmt-1 : Loyal Customers -----
#method-1a
#using table for counting custname occurance
(t1=table(sales$custname))
head(t1)  #unsorted
t2= sort(t1,decreasing=T )
head(t2)
sales %>% dplyr::count(custname, sort=TRUE)
?count
sales %>% dplyr::group_by(custname) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(desc(n))
mtcars %>% group_by(gear) %>% summarise_all(n=n() $>$ arrange(desc(n)))
mtcars %>% group_by(gear) %>% summarise(n=n())
mtcars %>% group_by(gear)
sales %>% dplyr::group_by(custname) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(desc(n))
mtcars %>% group_by(gear) %>% summarise(n=n()) #Used to show no.of units in
sales %>% dplyr::group_by(custname) %>% dplyr::summarise(n = n())
#Reqmt2- Profitable parts----
#which parts are sold more frequently - count
sales %>% dplyr::group_by(partnum) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(desc(n))
str(sales)
# which parts have highest Profit : partno - sum(profit)
sales %>% group_by (partnum) %>% summarise(TotalMargin= sum(margin)) %>% arrange(desc(TotalMargin)) %>% head()
?head
#Reqmt-3 : which region generated how much revenue
sales %>% group_by(region) %>% summarise(TotalRevenue=sum(revenue)) %>% arrange(desc(TotalRevenue))
regionRevenue = sales %>% group_by(region) %>% summarise(TotalRevenue=sum(revenue)) %>% arrange(desc(TotalRevenue))
regionRevenue
barplot(regionRevenue$TotalRevenue)
pie(regionRevenue$TotalRevenue)
barplot(regionRevenue$TotalRevenue)
mtcars %>% group_by(gear) %>% summarise(TotalMiles=sum(mpg))
#Reqmt-5 : top 2 customers names by revenue from each region
sales %>% group_by(region,custname) %>% summarise(TotalRevenue=sum(revenue)) %>% arrange(desc(TotalRevenue))  %>% print(n=Inf)
#print all rows print(n=Inf)
#now print only top 2 for each region
sales %>% group_by(region,custname) %>% summarise(TotalRevenue=sum(revenue)) %>% arrange(desc(TotalRevenue))  %>% top_n(n=2)
#Reqmt-6 : all partnos with margin > 10000 in order region, desc(revenue)
sales %>% filter(margin > 10000) %>% arrange(region, desc(revenue))
#plot
women
plot(women)
plot(women,type='p',pch=17)
plot(women,type='1')
plot(women,type='l')
plot(women,type='b',pch=18,lty=2,col=2)
plot(women, xlim=c(30,100), ylim=c(min(women$weight)-10, 200), pch=10)
#more features with plot
plot(x=women$weight, y=women$height, pch=15, xlab='Weight', ylab='Height', col='red', cex=2, type='b')
plot(women, type='l')
abline(lm(women$weight ~ women$height), col='red', lty=2, lwd=4)
#boxplot
boxplot(women$height)
abline(h=c(58, 62,65,68,72))
#draw lines on plot for number summary
summary(women)
boxplot(women$height, col='green')
abline(h=quantile(women$height))
#histogram
hist(women$height)
hist(women$height, breaks=10)
hist(women$height, breaks=5, col=1:5)
#histogram2
x = rnorm(100,50,100)
hist(x)
hist(x, freq=F, col=1:5)
lines(density(x))
#density plot : shape of data
plot(density(x), col='red')
#pie
x = c(10,20,40,50)
pie(x)
xlabels = c('A','B','C','D')
#barplot
barplot(x,col=1:4)
barplot(x,col=1:4, horiz = T)
#correlation plot
pairs(women)
cor(women$height,women$weight)
head(mtcars)
cor(mtcars)
pairs(mtcars)
options(digits=4)
cor(women$height,women$weight)
#correlation plot
pairs(women)
hist(mtcars$mpg)
hist(mtcars$wt)
par(mfrow=c(1,2))
hist(mtcars$mpg)
hist(mtcars$wt)
par(mfrow=c(2,1))
hist(mtcars$mpg)
hist(mtcars$wt)
par(mfrow=c(2,2))
hist(mtcars$mpg)
hist(mtcars$wt)
pie(table(mtcars$cly))
pie(table(mtcars$cly))
hist(mtcars$hp)
hist(mtcars$mpg)
hist(mtcars$wt)
mtcars
newdata=subset(mtcars,mpg>=20 & mpg<30,select=c(mpg,disp))
newdata
#using subset function
names(mtcars)
head(mtcars)
newdata=subset(mtcars,cly==6&disp>150,select=mpg:wt)
newdata=subset(mtcars, cly==6 & disp>150,select=mpg:wt)
newdata=subset(mtcars, cyl==6 & disp>150,select=mpg:wt)
newdata
library[VIM]
install.packages("VIM")
library[VIM]
library[VIM]
library[VIM]
# Missing Values
# Create, Detect, Replace, Remove, Impute, Visualise
library(VIM)
#read file : Method1
sales1 = read.csv("./data/denco.csv")
# whichever you read the data, store it in sales object
sales = sales1  # keeping a backup
str(sales)
head(t2)
sales
#plot
women
plot(women)
plot(women, type='l')
plot(women, type='p', pch=17)
plot(women, xlim=c(30,100), ylim=c(min(women$weight)-10, 200), pch=10)
plot(women, type='b', pch=18, lty=2, col=2)
#more features with plot
plot(x=women$weight, y=women$height, pch=15, xlab='Weight', ylab='Height', col='red', cex=2, type='b')
abline(lm(women$weight ~ women$height), col='red', lty=2, lwd=4)
#boxplot
boxplot(women$height)
#histogram
hist(women$height)
head(mtcars)
cor(mtcars)
pairs(mtcars)
#correlation plot
pairs(women)
cor(women$height,women$weight)
marks3=runif(30,50,100)
marks3
?runif
?seq
x2=seq(10,100,2)
x2
gradesF1 = factor(grades,ordered=T,levels=c('D','B','A','C'))
gradesF1
married = c(TRUE, FALSE, T,F,T,F,T,T)
married
sum(married)
class(married)
summary(married)
trunc(marks); round(marks,1); floor(marks); ceiling(marks)
?trunc
?paste
batch=sample(c(2016,2017,2018),size=30,replace=T)
batch
?data.frame
df$name
name=paste('student',1:30,sep='-')
df$name
df=data.frame(rollno,name,batch,gender,marks1,marks2,stringasfacotrs=F)
rollno=1:30
batch=sample(c(2016,2017,2018),size=30,replace=T)
gender=(c('M','F'))
marks1=rnorm(30,mean=65,sd=7)
marks2=rnorm(30,mean=60,sd=10)
df=data.frame(rollno,name,batch,gender,marks1,marks2,stringasfacotrs=F)
df$name
df[1,1:4]
aggregate(df$marks1,by=list(df$batch),FUN=mean)
aggregate(marks1~batch,data=df,FUN=mean)
mtcars
mtcars %>% group_by(gear) %>% summarise(mean(mpg),max(mpg)) #WIll show only specified tables when summarise is used instead of summarise_all
library(dplyr)  #For loading package for using
mtcars %>% group_by(gear) %>% summarise(mean(mpg),max(mpg)) #WIll show only specified tables when summarise is used instead of summarise_all
mtcars %>% group_by(gear) %>% summarise_all(mean)
women
cor(women$height,women$weight)
?cor
plot(women)
plot(women$height,women$weight)
#Create Linear model
fitl=ln(weight~height,data=women)
#Create Linear model
fitl=le(weight~height,data=women)
#Create Linear model
fitl=la(weight~height,data=women)
#Create Linear model
fitl=lm(weight~height,data=women)
#Create Linear model
fitl=lm(weight~height,data=women)
?lm
summary(fit)
summary(fitl)
fitted(fitl)
names(fitl)
cbind(women,fitted(fitl))
cbind(women,fitted(fitl),residual(fitl))  #How to fimd residual
cbind(women,fitted(fitl),residuals(fitl))  #How to fimd residual
ndata1=data.frame(height=62.5)
predict(fitl,newdata=ndata1)
ndata1=data.frame(height=(62.5,63.5)
ndata1=data.frame(height=(62.5,63.5))
ndata1=data.frame(height=c(62.5,63.5))
predict(fitl,newdata=ndata1)
names(mtcars)
fit2=lm(mpg~wt+hp,data=mtcars)
summary(fit2)
?lm
range(mtcars)
range(mtcars$wt)
range(mtcars$wt) :range(mtcars$hp)
range(mtcars$wt) : range(mtcars$hp)
ndata2=data.frame(wt=c(2,2,3),hp=(57,250,300))
ndata2=data.frame(wt=c(2,2,3),hp=c(57,250,300))
predict(fit2,newdata=ndata2)
ndata2=data.frame(wt=c(2,2,3),hp=c(57,250,300))
predict(fit2,newdata=ndata2)
fit2=lm(mpg~wt+hp,data=mtcars)
summary(fit2)
?predict
df =  read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
## view the first few rows of the data
head(df)
sum(is.na(df))
## two-way contingency table of categorical outcome and predictors we want to make sure there are no empty cells
xtabs(~admit + rank, data = df)
#convert rank into factors
df$rank = factor(df$rank)
fit3 = glm(admit ~ gre + gpa + rank, data=df,family="binomial")
summary(fit3)
#predict probabilities of original values
(prob=predict(fit3,type=c("response")))
cbind(df, prob)
#another set of data for prediction
range(df$gre); range(df$gpa);levels(df$rank)
(newdata2 = data.frame(gre = c(200, 300, 400, 500), gpa = c(2.5, 3, 3.3, 3.75), rank = factor(c(1,2,3,4))))
str(newdata2)
newdata2b = cbind(newdata2, predictProb2=predict(fit3, newdata = newdata2, type = "response"))
newdata2b
summary(fit2)
source('~/rWork/rProjects/Analytics/Logistic Regression.R', echo=TRUE)
source('~/rWork/rProjects/Analytics/Logistic Regression.R', echo=TRUE)
